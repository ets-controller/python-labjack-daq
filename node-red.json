[
    {
        "id": "4901a0f32eb7f3bc",
        "type": "tab",
        "label": "Database",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9165fb27074a613c",
        "type": "tab",
        "label": "Python",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f694214ce746579e",
        "type": "tab",
        "label": "Read Remote",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "622b7c2ad32f0fe6",
        "type": "tab",
        "label": "Relays",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d99d97e004fee415",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4216e9a52258f8cb",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "c4dfa7d8da268665",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "0648485c18acfe33",
        "type": "ui_tab",
        "name": "Tab 2",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "a03eb4f3d26c477a",
        "type": "ui_group",
        "name": "Pressure ",
        "tab": "d99d97e004fee415",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a343bc75c06cd2ed",
        "type": "ui_group",
        "name": "Liquid Nitrogen",
        "tab": "d99d97e004fee415",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b2d40cfa2a020055",
        "type": "ui_group",
        "name": "Dark Box In",
        "tab": "d99d97e004fee415",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "59951fd76c680eae",
        "type": "mongodb",
        "hostname": "172.16.0.205",
        "topology": "direct",
        "connectOptions": "",
        "port": "27017",
        "db": "ETS",
        "name": "Test"
    },
    {
        "id": "7dade2a005c73d13",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Influx Lab",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://172.16.0.216:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "57094b63e06db9a5",
        "type": "ui_group",
        "name": "Sensor DAQ",
        "tab": "d99d97e004fee415",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "405117961ba87182",
        "type": "ui_group",
        "name": "Dark Box Out",
        "tab": "d99d97e004fee415",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "676648969881c30a",
        "type": "ui_group",
        "name": "Data Buffer",
        "tab": "d99d97e004fee415",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8229bff6fca7cff0",
        "type": "ui_group",
        "name": "Motor",
        "tab": "d99d97e004fee415",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ab3c663ba053a7f7",
        "type": "ui_group",
        "name": "Autovalve",
        "tab": "d99d97e004fee415",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8b82dc2997a71777",
        "type": "ui_group",
        "name": "Autovalve",
        "tab": "d99d97e004fee415",
        "order": 9,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "03608d69fd05a669",
        "type": "inject",
        "z": "4901a0f32eb7f3bc",
        "name": "Poll Sensors",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "3aa41ea9d9aea29c"
            ]
        ]
    },
    {
        "id": "3aa41ea9d9aea29c",
        "type": "link out",
        "z": "4901a0f32eb7f3bc",
        "name": "Timestamp (quick plots)",
        "mode": "link",
        "links": [
            "132079cdc6e501cd",
            "373e3993eddf87a0",
            "6e0b80edce83a480",
            "e2c8a89d54378df0",
            "bca5b358b5a25cd7",
            "71813ed9c4e71ae2",
            "4bc85591cac5b42d"
        ],
        "x": 355,
        "y": 140,
        "wires": []
    },
    {
        "id": "36c71314ea0b6b1f",
        "type": "influxdb out",
        "z": "4901a0f32eb7f3bc",
        "influxdb": "7dade2a005c73d13",
        "name": "Upload Relay State",
        "measurement": "relay_state",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ets",
        "bucket": "sensor_suite",
        "x": 390,
        "y": 320,
        "wires": []
    },
    {
        "id": "752a4f2935891d48",
        "type": "link in",
        "z": "4901a0f32eb7f3bc",
        "name": "Relay State (In)",
        "links": [
            "de1fb10928b52cfb",
            "c65f979cfb45f726",
            "4577ce3c494e411a",
            "b7b6e6fdcef57f50"
        ],
        "x": 245,
        "y": 320,
        "wires": [
            [
                "36c71314ea0b6b1f"
            ]
        ]
    },
    {
        "id": "b0e979535784725f",
        "type": "comment",
        "z": "4901a0f32eb7f3bc",
        "name": "Write Relay State to Database",
        "info": "",
        "x": 240,
        "y": 260,
        "wires": []
    },
    {
        "id": "a75ba2d24e70bcaf",
        "type": "comment",
        "z": "4901a0f32eb7f3bc",
        "name": "Get Sensor Values",
        "info": "",
        "x": 210,
        "y": 80,
        "wires": []
    },
    {
        "id": "347a31098b867e46",
        "type": "link in",
        "z": "4901a0f32eb7f3bc",
        "name": "Serial COM (In)",
        "links": [
            "808feeed75f23639"
        ],
        "x": 245,
        "y": 440,
        "wires": [
            [
                "daef84175913555e"
            ]
        ]
    },
    {
        "id": "daef84175913555e",
        "type": "influxdb out",
        "z": "4901a0f32eb7f3bc",
        "influxdb": "7dade2a005c73d13",
        "name": "Upload Dark Box Sensors",
        "measurement": "dark_box",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ets",
        "bucket": "sensor_suite",
        "x": 410,
        "y": 440,
        "wires": []
    },
    {
        "id": "8214e2398b5734d9",
        "type": "comment",
        "z": "4901a0f32eb7f3bc",
        "name": "Write Dark Box Sensors to Database",
        "info": "",
        "x": 260,
        "y": 380,
        "wires": []
    },
    {
        "id": "e6e49aff946c8ddd",
        "type": "link in",
        "z": "4901a0f32eb7f3bc",
        "name": "Labjack (In)",
        "links": [
            "4373265ca9675269",
            "939bf1614dfd2b4e"
        ],
        "x": 245,
        "y": 560,
        "wires": [
            [
                "5406581248affc1e"
            ]
        ]
    },
    {
        "id": "5406581248affc1e",
        "type": "influxdb out",
        "z": "4901a0f32eb7f3bc",
        "influxdb": "7dade2a005c73d13",
        "name": "Upload LabJack Sensors",
        "measurement": "ets_cryostat",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "ets",
        "bucket": "sensor_suite",
        "x": 410,
        "y": 560,
        "wires": []
    },
    {
        "id": "12733cb28a2559c6",
        "type": "comment",
        "z": "4901a0f32eb7f3bc",
        "name": "Write Labjack Sensors to Database",
        "info": "",
        "x": 260,
        "y": 500,
        "wires": []
    },
    {
        "id": "cdbd22fc72e86676",
        "type": "ui_switch",
        "z": "9165fb27074a613c",
        "name": "Stream",
        "label": "ReadLJ",
        "tooltip": "",
        "group": "676648969881c30a",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 220,
        "wires": [
            [
                "530102d7c00152ef",
                "cd658b52eb32bf76"
            ]
        ]
    },
    {
        "id": "9ac52433c1e7ba6b",
        "type": "exec",
        "z": "9165fb27074a613c",
        "command": "cd python-labjack-daq && python readLJ.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1010,
        "y": 220,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "edc8e2380994956b",
        "type": "inject",
        "z": "9165fb27074a613c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "cdbd22fc72e86676"
            ]
        ]
    },
    {
        "id": "4aee3f4f6f063250",
        "type": "status",
        "z": "9165fb27074a613c",
        "name": "Stream status",
        "scope": [
            "9ac52433c1e7ba6b"
        ],
        "x": 350,
        "y": 300,
        "wires": [
            [
                "78c58af54bc0b333",
                "f55dfaa454a59df7"
            ]
        ]
    },
    {
        "id": "5365b230e4407b76",
        "type": "inject",
        "z": "9165fb27074a613c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 190,
        "y": 240,
        "wires": [
            [
                "cdbd22fc72e86676"
            ]
        ]
    },
    {
        "id": "530102d7c00152ef",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 220,
        "wires": [
            [
                "9ac52433c1e7ba6b"
            ]
        ]
    },
    {
        "id": "cd658b52eb32bf76",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 260,
        "wires": [
            [
                "78c58af54bc0b333"
            ]
        ]
    },
    {
        "id": "f6278869d3517154",
        "type": "exec",
        "z": "9165fb27074a613c",
        "command": "kill -9 ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 890,
        "y": 300,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "78c58af54bc0b333",
        "type": "function",
        "z": "9165fb27074a613c",
        "name": "Get PID for kill",
        "func": "// Check if msg.payload is not false\nif (msg.payload !== false) {\n    // Store the value of msg.status.text.split(':')[1] in context.global.pid\n    var statusText = msg.status.text || '';\n    var splitText = statusText.split(':');\n    \n    if (splitText.length > 1) {\n        // Extract PID from the split text\n        var pid_data = splitText[1].trim();\n        \n        // Set context.global.pid to the extracted PID\n        context.global.pid_data = pid_data;\n    } else {\n        node.warn('Invalid status text format');\n    }\n}\n\n// Otherwise, if msg.payload is false, set msg.payload to the PID\nif (msg.payload == false) {\nmsg.payload = context.global.pid_data;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 300,
        "wires": [
            [
                "f6278869d3517154"
            ]
        ]
    },
    {
        "id": "7b863f9b790d20d0",
        "type": "ui_switch",
        "z": "9165fb27074a613c",
        "name": "Buffer",
        "label": "Buffer",
        "tooltip": "",
        "group": "676648969881c30a",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 740,
        "wires": [
            [
                "14c17b626523c8b8",
                "b5453ff10689c950"
            ]
        ]
    },
    {
        "id": "e1b09ff19497bbf8",
        "type": "exec",
        "z": "9165fb27074a613c",
        "command": "cd python-labjack-daq && python bufferdata.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1020,
        "y": 740,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "e4c696f29293cc33",
        "type": "inject",
        "z": "9165fb27074a613c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 190,
        "y": 720,
        "wires": [
            [
                "7b863f9b790d20d0"
            ]
        ]
    },
    {
        "id": "6f8522dd59dc454a",
        "type": "status",
        "z": "9165fb27074a613c",
        "name": "Buffer status",
        "scope": [
            "e1b09ff19497bbf8"
        ],
        "x": 350,
        "y": 820,
        "wires": [
            [
                "8273b19b43fcade6",
                "462dc116804f45e5"
            ]
        ]
    },
    {
        "id": "42b6c00314396a28",
        "type": "inject",
        "z": "9165fb27074a613c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 190,
        "y": 760,
        "wires": [
            [
                "7b863f9b790d20d0"
            ]
        ]
    },
    {
        "id": "14c17b626523c8b8",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 740,
        "wires": [
            [
                "e1b09ff19497bbf8"
            ]
        ]
    },
    {
        "id": "b5453ff10689c950",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 780,
        "wires": [
            [
                "8273b19b43fcade6"
            ]
        ]
    },
    {
        "id": "4a8ab8531198c152",
        "type": "exec",
        "z": "9165fb27074a613c",
        "command": "kill -9 ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 890,
        "y": 820,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "8273b19b43fcade6",
        "type": "function",
        "z": "9165fb27074a613c",
        "name": "Get PID for kill",
        "func": "// Check if msg.payload is not false\nif (msg.payload !== false) {\n    // Store the value of msg.status.text.split(':')[1] in context.global.pid\n    var statusText = msg.status.text || '';\n    var splitText = statusText.split(':');\n    \n    if (splitText.length > 1) {\n        // Extract PID from the split text\n        var pid_buffer = splitText[1].trim();\n        \n        // Set context.global.pid to the extracted PID\n        context.global.pid_buffer = pid_buffer;\n    } else {\n        node.warn('Invalid status text format');\n    }\n}\n\n// Otherwise, if msg.payload is false, set msg.payload to the PID\nif (msg.payload == false) {\nmsg.payload = context.global.pid_buffer;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 820,
        "wires": [
            [
                "4a8ab8531198c152"
            ]
        ]
    },
    {
        "id": "1ce495e82af2d518",
        "type": "status",
        "z": "9165fb27074a613c",
        "name": "Switch status",
        "scope": [
            "7b863f9b790d20d0"
        ],
        "x": 250,
        "y": 980,
        "wires": [
            [
                "2971e6f8c58b9232"
            ]
        ]
    },
    {
        "id": "2971e6f8c58b9232",
        "type": "function",
        "z": "9165fb27074a613c",
        "name": "Print switch status",
        "func": "// Store the value of msg.status.text.split(':')[1] in context.global.pid\nvar statusText = msg.status.text || '';\nmsg.payload = statusText;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 980,
        "wires": [
            [
                "7885a6da17ce749d"
            ]
        ]
    },
    {
        "id": "3c15510c719dca75",
        "type": "tobool",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "showState": false,
        "filter": false,
        "x": 770,
        "y": 980,
        "wires": [
            [
                "346e69c74f005b6e",
                "4af18da324f18ac9"
            ]
        ]
    },
    {
        "id": "7885a6da17ce749d",
        "type": "change",
        "z": "9165fb27074a613c",
        "name": "Bufferswitch",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Bufferswitch",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 980,
        "wires": [
            [
                "3c15510c719dca75"
            ]
        ]
    },
    {
        "id": "462dc116804f45e5",
        "type": "function",
        "z": "9165fb27074a613c",
        "name": "Check fault",
        "func": "// Store the value of msg.status.text.split(':')[1] in context.global.pid\nvar statusColor = msg.status.fill || '';\n\nmsg.payload = statusColor;\nif (statusColor == 'blue'){\n    // Set the message payload to false\n    msg.payload = 'false'\n}\nif (statusColor == 'red'){\n    // Set the message payload to true\n    msg.payload = 'true'\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 940,
        "wires": [
            [
                "3dafb9e70f5e447a"
            ]
        ]
    },
    {
        "id": "ae5630bc9c52a468",
        "type": "tobool",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "showState": false,
        "filter": false,
        "x": 1090,
        "y": 940,
        "wires": [
            [
                "4bfef54d7c25b851"
            ]
        ]
    },
    {
        "id": "3dafb9e70f5e447a",
        "type": "change",
        "z": "9165fb27074a613c",
        "name": "Bufferon",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Bufferon",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 940,
        "wires": [
            [
                "ae5630bc9c52a468"
            ]
        ]
    },
    {
        "id": "4bfef54d7c25b851",
        "type": "and",
        "z": "9165fb27074a613c",
        "name": "",
        "topic": "",
        "property": "payload",
        "minData": "2",
        "filter": false,
        "x": 1230,
        "y": 960,
        "wires": [
            [
                "c6b86ce0c8f0d9c0"
            ]
        ]
    },
    {
        "id": "346e69c74f005b6e",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 910,
        "y": 1020,
        "wires": [
            [
                "ef6a7f6bfbb848ad"
            ]
        ]
    },
    {
        "id": "4af18da324f18ac9",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 980,
        "wires": [
            [
                "4bfef54d7c25b851"
            ]
        ]
    },
    {
        "id": "ef6a7f6bfbb848ad",
        "type": "delay",
        "z": "9165fb27074a613c",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1040,
        "y": 1020,
        "wires": [
            [
                "4bfef54d7c25b851"
            ]
        ]
    },
    {
        "id": "2b6b3603ba45ddc3",
        "type": "link out",
        "z": "9165fb27074a613c",
        "name": "Restart Buffer",
        "mode": "link",
        "links": [
            "52ced69b2c7b6b78",
            "75b75b20e850a462",
            "21593eb3d9a2c1c4"
        ],
        "x": 1435,
        "y": 960,
        "wires": []
    },
    {
        "id": "184a7d80e8981c3f",
        "type": "status",
        "z": "9165fb27074a613c",
        "name": "Switch status",
        "scope": [
            "7b863f9b790d20d0"
        ],
        "x": 210,
        "y": 460,
        "wires": [
            [
                "a1393581c87d9105"
            ]
        ]
    },
    {
        "id": "a1393581c87d9105",
        "type": "function",
        "z": "9165fb27074a613c",
        "name": "Print switch status",
        "func": "// Store the value of msg.status.text.split(':')[1] in context.global.pid\nvar statusText = msg.status.text || '';\nmsg.payload = statusText;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 460,
        "wires": [
            [
                "f71c8fc4c9e47b71"
            ]
        ]
    },
    {
        "id": "3fc223a32cde7bc4",
        "type": "tobool",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "showState": false,
        "filter": false,
        "x": 750,
        "y": 460,
        "wires": [
            [
                "bbc77055a7180393",
                "153641632b43fd46"
            ]
        ]
    },
    {
        "id": "f71c8fc4c9e47b71",
        "type": "change",
        "z": "9165fb27074a613c",
        "name": "Streamswitch",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Streamswitch",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 460,
        "wires": [
            [
                "3fc223a32cde7bc4"
            ]
        ]
    },
    {
        "id": "f55dfaa454a59df7",
        "type": "function",
        "z": "9165fb27074a613c",
        "name": "Check fault",
        "func": "// Store the value of msg.status.text.split(':')[1] in context.global.pid\nvar statusColor = msg.status.fill || '';\n\nmsg.payload = statusColor;\nif (statusColor == 'blue'){\n    // Set the message payload to false\n    msg.payload = 'false'\n}\nif (statusColor == 'red'){\n    // Set the message payload to true\n    msg.payload = 'true'\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 420,
        "wires": [
            [
                "8644cff661e8acd7"
            ]
        ]
    },
    {
        "id": "90c2dbc247da31f2",
        "type": "tobool",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "showState": false,
        "filter": false,
        "x": 1070,
        "y": 420,
        "wires": [
            [
                "4f1c5ea04d62ea45"
            ]
        ]
    },
    {
        "id": "8644cff661e8acd7",
        "type": "change",
        "z": "9165fb27074a613c",
        "name": "Switchon",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Switchon",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 420,
        "wires": [
            [
                "90c2dbc247da31f2"
            ]
        ]
    },
    {
        "id": "4f1c5ea04d62ea45",
        "type": "and",
        "z": "9165fb27074a613c",
        "name": "",
        "topic": "",
        "property": "payload",
        "minData": "2",
        "filter": false,
        "x": 1210,
        "y": 440,
        "wires": [
            [
                "ad380f1daa6c64ad"
            ]
        ]
    },
    {
        "id": "bbc77055a7180393",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 890,
        "y": 560,
        "wires": [
            [
                "4188a7f6f87fa7eb"
            ]
        ]
    },
    {
        "id": "153641632b43fd46",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1030,
        "y": 460,
        "wires": [
            [
                "4f1c5ea04d62ea45"
            ]
        ]
    },
    {
        "id": "4188a7f6f87fa7eb",
        "type": "delay",
        "z": "9165fb27074a613c",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1020,
        "y": 560,
        "wires": [
            [
                "4f1c5ea04d62ea45"
            ]
        ]
    },
    {
        "id": "bde1776655858ec6",
        "type": "link out",
        "z": "9165fb27074a613c",
        "name": "Restart Stream",
        "mode": "link",
        "links": [
            "8531dc64366b4907",
            "c0010bcc9143a4ea"
        ],
        "x": 1435,
        "y": 440,
        "wires": []
    },
    {
        "id": "c6b86ce0c8f0d9c0",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1350,
        "y": 960,
        "wires": [
            [
                "2b6b3603ba45ddc3"
            ]
        ]
    },
    {
        "id": "75b75b20e850a462",
        "type": "link in",
        "z": "9165fb27074a613c",
        "name": "link in 1",
        "links": [
            "2b6b3603ba45ddc3"
        ],
        "x": 65,
        "y": 640,
        "wires": [
            [
                "ed30c5dcd40e8f4f",
                "18a5e13cd314c84e"
            ]
        ]
    },
    {
        "id": "ed30c5dcd40e8f4f",
        "type": "not",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "showState": false,
        "filter": false,
        "x": 190,
        "y": 640,
        "wires": [
            [
                "7b863f9b790d20d0"
            ]
        ]
    },
    {
        "id": "18a5e13cd314c84e",
        "type": "delay",
        "z": "9165fb27074a613c",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 680,
        "wires": [
            [
                "7b863f9b790d20d0"
            ]
        ]
    },
    {
        "id": "ad380f1daa6c64ad",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1350,
        "y": 440,
        "wires": [
            [
                "bde1776655858ec6"
            ]
        ]
    },
    {
        "id": "c0010bcc9143a4ea",
        "type": "link in",
        "z": "9165fb27074a613c",
        "name": "link in 2",
        "links": [
            "bde1776655858ec6"
        ],
        "x": 65,
        "y": 120,
        "wires": [
            [
                "f2d6788ef3474a5c",
                "96e31b0ca29b8454"
            ]
        ]
    },
    {
        "id": "f2d6788ef3474a5c",
        "type": "not",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "showState": false,
        "filter": false,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "cdbd22fc72e86676"
            ]
        ]
    },
    {
        "id": "96e31b0ca29b8454",
        "type": "delay",
        "z": "9165fb27074a613c",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 160,
        "wires": [
            [
                "cdbd22fc72e86676"
            ]
        ]
    },
    {
        "id": "3355e8551f4a4208",
        "type": "comment",
        "z": "9165fb27074a613c",
        "name": "Check whether the switch state matches the program state",
        "info": "",
        "x": 750,
        "y": 900,
        "wires": []
    },
    {
        "id": "fc8a3ea3ea1f80d2",
        "type": "comment",
        "z": "9165fb27074a613c",
        "name": "Check whether the switch state matches the program state",
        "info": "",
        "x": 730,
        "y": 380,
        "wires": []
    },
    {
        "id": "c5080d0fb9d07d59",
        "type": "comment",
        "z": "9165fb27074a613c",
        "name": "Run the python data streaming program",
        "info": "",
        "x": 450,
        "y": 180,
        "wires": []
    },
    {
        "id": "6f3a184ba760d1fc",
        "type": "comment",
        "z": "9165fb27074a613c",
        "name": "Run the python buffer program",
        "info": "",
        "x": 420,
        "y": 700,
        "wires": []
    },
    {
        "id": "44a9aa61fe43dfc5",
        "type": "ui_switch",
        "z": "9165fb27074a613c",
        "name": "Autovalve",
        "label": "Autovalve",
        "tooltip": "",
        "group": "8b82dc2997a71777",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 1240,
        "wires": [
            [
                "b980feec714ee2b4",
                "aff066b050c05fe9"
            ]
        ]
    },
    {
        "id": "28c000b3cae1ac23",
        "type": "exec",
        "z": "9165fb27074a613c",
        "command": "cd python-labjack-daq && python autovalve.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1020,
        "y": 1240,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "42917db9bb72cc25",
        "type": "inject",
        "z": "9165fb27074a613c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 190,
        "y": 1220,
        "wires": [
            [
                "44a9aa61fe43dfc5"
            ]
        ]
    },
    {
        "id": "81d6227bad2aedd1",
        "type": "status",
        "z": "9165fb27074a613c",
        "name": "Autovalve status",
        "scope": [
            "28c000b3cae1ac23"
        ],
        "x": 360,
        "y": 1320,
        "wires": [
            [
                "065ed7faf1e10f77",
                "1c1b9ce4157aa12f"
            ]
        ]
    },
    {
        "id": "55d819e00fdde0ea",
        "type": "inject",
        "z": "9165fb27074a613c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 190,
        "y": 1260,
        "wires": [
            [
                "44a9aa61fe43dfc5"
            ]
        ]
    },
    {
        "id": "b980feec714ee2b4",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 1240,
        "wires": [
            [
                "28c000b3cae1ac23"
            ]
        ]
    },
    {
        "id": "aff066b050c05fe9",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 1280,
        "wires": [
            [
                "065ed7faf1e10f77"
            ]
        ]
    },
    {
        "id": "cfe88a4042e1c403",
        "type": "exec",
        "z": "9165fb27074a613c",
        "command": "kill -9 ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 890,
        "y": 1320,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "065ed7faf1e10f77",
        "type": "function",
        "z": "9165fb27074a613c",
        "name": "Get PID for kill",
        "func": "// Check if msg.payload is not false\nif (msg.payload !== false) {\n    // Store the value of msg.status.text.split(':')[1] in context.global.pid\n    var statusText = msg.status.text || '';\n    var splitText = statusText.split(':');\n    \n    if (splitText.length > 1) {\n        // Extract PID from the split text\n        var pid_buffer = splitText[1].trim();\n        \n        // Set context.global.pid to the extracted PID\n        context.global.pid_buffer = pid_buffer;\n    } else {\n        node.warn('Invalid status text format');\n    }\n}\n\n// Otherwise, if msg.payload is false, set msg.payload to the PID\nif (msg.payload == false) {\nmsg.payload = context.global.pid_buffer;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1320,
        "wires": [
            [
                "cfe88a4042e1c403"
            ]
        ]
    },
    {
        "id": "afe08076ef73941d",
        "type": "status",
        "z": "9165fb27074a613c",
        "name": "Switch status",
        "scope": [
            "44a9aa61fe43dfc5"
        ],
        "x": 250,
        "y": 1480,
        "wires": [
            [
                "9ac75fc1a69af454"
            ]
        ]
    },
    {
        "id": "9ac75fc1a69af454",
        "type": "function",
        "z": "9165fb27074a613c",
        "name": "Print switch status",
        "func": "// Store the value of msg.status.text.split(':')[1] in context.global.pid\nvar statusText = msg.status.text || '';\nmsg.payload = statusText;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1480,
        "wires": [
            [
                "97879b4e990367c9"
            ]
        ]
    },
    {
        "id": "46db702168d0ae16",
        "type": "tobool",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "showState": false,
        "filter": false,
        "x": 770,
        "y": 1480,
        "wires": [
            [
                "7402eca968ab87d6",
                "7b456aaeb949a85c"
            ]
        ]
    },
    {
        "id": "97879b4e990367c9",
        "type": "change",
        "z": "9165fb27074a613c",
        "name": "Autoswitch",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Autoswitch",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 1480,
        "wires": [
            [
                "46db702168d0ae16"
            ]
        ]
    },
    {
        "id": "1c1b9ce4157aa12f",
        "type": "function",
        "z": "9165fb27074a613c",
        "name": "Check fault",
        "func": "// Store the value of msg.status.text.split(':')[1] in context.global.pid\nvar statusColor = msg.status.fill || '';\n\nmsg.payload = statusColor;\nif (statusColor == 'blue'){\n    // Set the message payload to false\n    msg.payload = 'false'\n}\nif (statusColor == 'red'){\n    // Set the message payload to true\n    msg.payload = 'true'\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1440,
        "wires": [
            [
                "6c65b693caf00691"
            ]
        ]
    },
    {
        "id": "6c96e3a0e5ce76e1",
        "type": "tobool",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "showState": false,
        "filter": false,
        "x": 1090,
        "y": 1440,
        "wires": [
            [
                "dc35d74c8fe14301"
            ]
        ]
    },
    {
        "id": "6c65b693caf00691",
        "type": "change",
        "z": "9165fb27074a613c",
        "name": "Autoon",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Autoon",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 1440,
        "wires": [
            [
                "6c96e3a0e5ce76e1"
            ]
        ]
    },
    {
        "id": "dc35d74c8fe14301",
        "type": "and",
        "z": "9165fb27074a613c",
        "name": "",
        "topic": "",
        "property": "payload",
        "minData": "2",
        "filter": false,
        "x": 1230,
        "y": 1460,
        "wires": [
            [
                "dae466118608fc18"
            ]
        ]
    },
    {
        "id": "7402eca968ab87d6",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 910,
        "y": 1520,
        "wires": [
            [
                "69db507b80fde8f7"
            ]
        ]
    },
    {
        "id": "7b456aaeb949a85c",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 1480,
        "wires": [
            [
                "dc35d74c8fe14301"
            ]
        ]
    },
    {
        "id": "69db507b80fde8f7",
        "type": "delay",
        "z": "9165fb27074a613c",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1040,
        "y": 1520,
        "wires": [
            [
                "dc35d74c8fe14301"
            ]
        ]
    },
    {
        "id": "c0bf65a1c7f2a7dd",
        "type": "link out",
        "z": "9165fb27074a613c",
        "name": "Restart Buffer",
        "mode": "link",
        "links": [
            "52ced69b2c7b6b78",
            "6d17daf63b802810",
            "21593eb3d9a2c1c4"
        ],
        "x": 1435,
        "y": 1460,
        "wires": []
    },
    {
        "id": "dae466118608fc18",
        "type": "switch",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1350,
        "y": 1460,
        "wires": [
            [
                "c0bf65a1c7f2a7dd"
            ]
        ]
    },
    {
        "id": "6d17daf63b802810",
        "type": "link in",
        "z": "9165fb27074a613c",
        "name": "link in 3",
        "links": [
            "c0bf65a1c7f2a7dd"
        ],
        "x": 65,
        "y": 1140,
        "wires": [
            [
                "ad9c0e970da3ccd0",
                "62be4ff2b0a855d9"
            ]
        ]
    },
    {
        "id": "ad9c0e970da3ccd0",
        "type": "not",
        "z": "9165fb27074a613c",
        "name": "",
        "property": "payload",
        "showState": false,
        "filter": false,
        "x": 190,
        "y": 1140,
        "wires": [
            [
                "44a9aa61fe43dfc5"
            ]
        ]
    },
    {
        "id": "62be4ff2b0a855d9",
        "type": "delay",
        "z": "9165fb27074a613c",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 1180,
        "wires": [
            [
                "44a9aa61fe43dfc5"
            ]
        ]
    },
    {
        "id": "ae48e924b090d56c",
        "type": "comment",
        "z": "9165fb27074a613c",
        "name": "Check whether the switch state matches the program state",
        "info": "",
        "x": 750,
        "y": 1400,
        "wires": []
    },
    {
        "id": "eddb12b44e54aa30",
        "type": "comment",
        "z": "9165fb27074a613c",
        "name": "Run the python buffer program",
        "info": "",
        "x": 420,
        "y": 1200,
        "wires": []
    },
    {
        "id": "3f84523399efe808",
        "type": "serial in",
        "z": "f694214ce746579e",
        "name": "DHT22",
        "serial": "c4dfa7d8da268665",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "6278e76b82c20b67"
            ]
        ]
    },
    {
        "id": "6278e76b82c20b67",
        "type": "csv",
        "z": "f694214ce746579e",
        "name": "Parse Serial Output",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Humidity 1, Temperature 1, Humidity 2, Temperature 2",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 350,
        "y": 140,
        "wires": [
            [
                "808feeed75f23639",
                "313f3ef324bbda0a"
            ]
        ]
    },
    {
        "id": "808feeed75f23639",
        "type": "link out",
        "z": "f694214ce746579e",
        "name": "Serial COM (Out)",
        "mode": "link",
        "links": [
            "347a31098b867e46"
        ],
        "x": 735,
        "y": 140,
        "wires": []
    },
    {
        "id": "48c63a7e827d4f90",
        "type": "comment",
        "z": "f694214ce746579e",
        "name": "Connect to Arduino",
        "info": "",
        "x": 190,
        "y": 80,
        "wires": []
    },
    {
        "id": "21356d58c9141f01",
        "type": "comment",
        "z": "f694214ce746579e",
        "name": "Read Labjack Data",
        "info": "",
        "x": 190,
        "y": 420,
        "wires": []
    },
    {
        "id": "4a14da769fbee218",
        "type": "file in",
        "z": "f694214ce746579e",
        "name": "LJ Stream",
        "filename": "/home/pi/python-labjack-daq/DATA/LJdata.csv",
        "filenameType": "str",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 370,
        "y": 480,
        "wires": [
            [
                "4c75fb6f6aaa33e1"
            ]
        ]
    },
    {
        "id": "4c75fb6f6aaa33e1",
        "type": "csv",
        "z": "f694214ce746579e",
        "name": "Parse Labjack Data",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 570,
        "y": 480,
        "wires": [
            [
                "4fd541009e0bda7c"
            ]
        ]
    },
    {
        "id": "373e3993eddf87a0",
        "type": "link in",
        "z": "f694214ce746579e",
        "name": "Timestamp (In)",
        "links": [
            "3aa41ea9d9aea29c"
        ],
        "x": 225,
        "y": 480,
        "wires": [
            [
                "4a14da769fbee218"
            ]
        ]
    },
    {
        "id": "4373265ca9675269",
        "type": "link out",
        "z": "f694214ce746579e",
        "name": "Labjack (Out)",
        "mode": "link",
        "links": [
            "e6e49aff946c8ddd"
        ],
        "x": 1315,
        "y": 420,
        "wires": []
    },
    {
        "id": "b5ad21e164cf938e",
        "type": "function",
        "z": "f694214ce746579e",
        "name": "Exponentiate Pressure Value",
        "func": "msg.payload.FRG1 = 10**(msg.payload.FRG1)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 420,
        "wires": [
            [
                "4373265ca9675269"
            ]
        ]
    },
    {
        "id": "4fd541009e0bda7c",
        "type": "switch",
        "z": "f694214ce746579e",
        "name": "Check if the reading is valid",
        "property": "msg.payload.FRG1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "btwn",
                "v": "-10",
                "vt": "num",
                "v2": "4",
                "v2t": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 840,
        "y": 480,
        "wires": [
            [
                "67e147e50befe368",
                "b5ad21e164cf938e"
            ]
        ]
    },
    {
        "id": "0677cca405fb96c8",
        "type": "comment",
        "z": "f694214ce746579e",
        "name": "Read Labjack Buffer",
        "info": "",
        "x": 190,
        "y": 560,
        "wires": []
    },
    {
        "id": "ad94bbcbf1f7bc49",
        "type": "file in",
        "z": "f694214ce746579e",
        "name": "LJ Analysis",
        "filename": "/home/pi/python-labjack-daq/DATA/LJanalysis.csv",
        "filenameType": "str",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 370,
        "y": 620,
        "wires": [
            [
                "f0cff05bcbe63652"
            ]
        ]
    },
    {
        "id": "f0cff05bcbe63652",
        "type": "csv",
        "z": "f694214ce746579e",
        "name": "Parse Labjack Data",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp;K1;K2;TC1;TC2;TC3;TC4;TC5;RES1;RES2;RES3;RES4;RES5;RES6;RES7;FRG1;dRES1;dRES2;dRES3;dRES4;dRES5;dRES6;dRES7",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 570,
        "y": 620,
        "wires": [
            [
                "a7dd8bf3b7c6b735",
                "987289388db02f20",
                "63aa6a7e8e2ad18f",
                "82e9b5fa86157263",
                "f845c4c66cf443e7"
            ]
        ]
    },
    {
        "id": "6e0b80edce83a480",
        "type": "link in",
        "z": "f694214ce746579e",
        "name": "Timestamp (In)",
        "links": [
            "3aa41ea9d9aea29c"
        ],
        "x": 225,
        "y": 620,
        "wires": [
            [
                "ad94bbcbf1f7bc49"
            ]
        ]
    },
    {
        "id": "b09b8f9999b3eb71",
        "type": "ui_chart",
        "z": "f694214ce746579e",
        "name": "",
        "group": "8b82dc2997a71777",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "Cryostat power",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1100,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "a7dd8bf3b7c6b735",
        "type": "change",
        "z": "f694214ce746579e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msg.payload.dRES1",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 620,
        "wires": [
            [
                "b09b8f9999b3eb71"
            ]
        ]
    },
    {
        "id": "987289388db02f20",
        "type": "change",
        "z": "f694214ce746579e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msg.payload.dRES2",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 660,
        "wires": [
            [
                "b09b8f9999b3eb71"
            ]
        ]
    },
    {
        "id": "63aa6a7e8e2ad18f",
        "type": "change",
        "z": "f694214ce746579e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msg.payload.dRES7",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 700,
        "wires": [
            [
                "b09b8f9999b3eb71"
            ]
        ]
    },
    {
        "id": "901c5684e1a71981",
        "type": "ui_chart",
        "z": "f694214ce746579e",
        "name": "",
        "group": "676648969881c30a",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Fill",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1070,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "82e9b5fa86157263",
        "type": "change",
        "z": "f694214ce746579e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.RES1",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 780,
        "wires": [
            [
                "901c5684e1a71981",
                "16c66f7ca6659e04"
            ]
        ]
    },
    {
        "id": "f845c4c66cf443e7",
        "type": "change",
        "z": "f694214ce746579e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msg.payload.RES7",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 820,
        "wires": [
            [
                "47813f9b17b42848",
                "324499dfd3336c2b"
            ]
        ]
    },
    {
        "id": "47813f9b17b42848",
        "type": "ui_chart",
        "z": "f694214ce746579e",
        "name": "",
        "group": "676648969881c30a",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "Overfill",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1080,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "a8345f36fb808c26",
        "type": "function",
        "z": "f694214ce746579e",
        "name": "function 1",
        "func": "// The values for y = (x-xmin)/(xmax-xmin) must\n// be determined from the dataset\nmsg.payload = (msg.payload-8.925)/(9.575-8.925)*100\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 780,
        "wires": [
            [
                "52c9aa395e7e9f1a"
            ]
        ]
    },
    {
        "id": "4b22d8fbd360c3dd",
        "type": "function",
        "z": "f694214ce746579e",
        "name": "function 2",
        "func": "// The values for y = (x-xmin)/(xmax-xmin) must\n// be determined from the dataset\nmsg.payload = (msg.payload-7.65)/(10.09-7.65)*100\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 820,
        "wires": [
            [
                "930068b7badc3ba9"
            ]
        ]
    },
    {
        "id": "930068b7badc3ba9",
        "type": "ui_gauge",
        "z": "f694214ce746579e",
        "name": "",
        "group": "a343bc75c06cd2ed",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "wave",
        "title": "Overfill gauge",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "80",
        "diff": false,
        "className": "",
        "x": 1440,
        "y": 820,
        "wires": []
    },
    {
        "id": "52c9aa395e7e9f1a",
        "type": "ui_gauge",
        "z": "f694214ce746579e",
        "name": "",
        "group": "8b82dc2997a71777",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "wave",
        "title": "High-power fill level",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1450,
        "y": 780,
        "wires": []
    },
    {
        "id": "16c66f7ca6659e04",
        "type": "switch",
        "z": "f694214ce746579e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "btwn",
                "v": "-11",
                "vt": "num",
                "v2": "11",
                "v2t": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1070,
        "y": 780,
        "wires": [
            [
                "a8345f36fb808c26"
            ]
        ]
    },
    {
        "id": "324499dfd3336c2b",
        "type": "switch",
        "z": "f694214ce746579e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "btwn",
                "v": "-11",
                "vt": "num",
                "v2": "11",
                "v2t": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1070,
        "y": 820,
        "wires": [
            [
                "4b22d8fbd360c3dd"
            ]
        ]
    },
    {
        "id": "3533080151724162",
        "type": "ui_chart",
        "z": "f694214ce746579e",
        "name": "",
        "group": "a03eb4f3d26c477a",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "Internal pressure",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1450,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "67e147e50befe368",
        "type": "change",
        "z": "f694214ce746579e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msg.payload.FRG1",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 480,
        "wires": [
            [
                "3533080151724162"
            ]
        ]
    },
    {
        "id": "313f3ef324bbda0a",
        "type": "change",
        "z": "f694214ce746579e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[\"Humidity 2\"]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 380,
        "wires": [
            [
                "2cb04423c7ebf302"
            ]
        ]
    },
    {
        "id": "2cb04423c7ebf302",
        "type": "ui_chart",
        "z": "f694214ce746579e",
        "name": "",
        "group": "b2d40cfa2a020055",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 790,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "b7318db0ca218e23",
        "type": "rpi-gpio out",
        "z": "622b7c2ad32f0fe6",
        "name": "Pressure Gauge",
        "pin": "26",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 620,
        "y": 560,
        "wires": []
    },
    {
        "id": "8c09e51e91d32426",
        "type": "rpi-gpio out",
        "z": "622b7c2ad32f0fe6",
        "name": "Liquid Nitrogen",
        "pin": "19",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 680,
        "y": 360,
        "wires": []
    },
    {
        "id": "66ee4fadd1c2d786",
        "type": "rpi-gpio out",
        "z": "622b7c2ad32f0fe6",
        "name": "Dry Nitrogen (Bottle)",
        "pin": "20",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 680,
        "y": 940,
        "wires": []
    },
    {
        "id": "0aa0d20eb277d3db",
        "type": "rpi-gpio out",
        "z": "622b7c2ad32f0fe6",
        "name": "Dry Nitrogen (Dewar)",
        "pin": "5",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 700,
        "y": 740,
        "wires": []
    },
    {
        "id": "642f4b61ccaa28e4",
        "type": "ui_button",
        "z": "622b7c2ad32f0fe6",
        "name": "Pressure relay open",
        "group": "a03eb4f3d26c477a",
        "order": 4,
        "width": "3",
        "height": "2",
        "passthru": false,
        "label": "Enable",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "PGR",
        "topicType": "msg",
        "x": 340,
        "y": 620,
        "wires": [
            [
                "b7318db0ca218e23",
                "451ba14a39b61ac1"
            ]
        ]
    },
    {
        "id": "1239d488549b50c9",
        "type": "ui_button",
        "z": "622b7c2ad32f0fe6",
        "name": "Pressure relay closed",
        "group": "a03eb4f3d26c477a",
        "order": 5,
        "width": "3",
        "height": "2",
        "passthru": false,
        "label": "Disable",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "PGR",
        "topicType": "msg",
        "x": 340,
        "y": 580,
        "wires": [
            [
                "b7318db0ca218e23",
                "451ba14a39b61ac1"
            ]
        ]
    },
    {
        "id": "5aa547436835f96c",
        "type": "ui_button",
        "z": "622b7c2ad32f0fe6",
        "name": "Close Liquid Nitrogen Valve",
        "group": "a343bc75c06cd2ed",
        "order": 4,
        "width": "3",
        "height": "2",
        "passthru": true,
        "label": "Close Valve",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "LNV",
        "topicType": "msg",
        "x": 360,
        "y": 420,
        "wires": [
            [
                "8c09e51e91d32426",
                "702dff2e8c43a3d0"
            ]
        ]
    },
    {
        "id": "746daebd871c31f3",
        "type": "ui_button",
        "z": "622b7c2ad32f0fe6",
        "name": "Open Liquid Nitrogen Valve",
        "group": "a343bc75c06cd2ed",
        "order": 5,
        "width": "3",
        "height": "2",
        "passthru": true,
        "label": "Open Valve",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "LNV",
        "topicType": "msg",
        "x": 360,
        "y": 380,
        "wires": [
            [
                "8c09e51e91d32426",
                "702dff2e8c43a3d0",
                "8dba6138e0405847"
            ]
        ]
    },
    {
        "id": "5571a66e9e174e3a",
        "type": "ui_button",
        "z": "622b7c2ad32f0fe6",
        "name": "Dry nitrogen (Bottle) open",
        "group": "405117961ba87182",
        "order": 1,
        "width": "3",
        "height": "2",
        "passthru": false,
        "label": "Open Valve",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "DNB",
        "topicType": "msg",
        "x": 360,
        "y": 1000,
        "wires": [
            [
                "66ee4fadd1c2d786",
                "307fca30ed35c29f"
            ]
        ]
    },
    {
        "id": "5cd6df8873243e2f",
        "type": "ui_button",
        "z": "622b7c2ad32f0fe6",
        "name": "Dry nitrogen (Bottle) closed",
        "group": "405117961ba87182",
        "order": 2,
        "width": "3",
        "height": "2",
        "passthru": false,
        "label": "Close Valve",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "DNB",
        "topicType": "msg",
        "x": 360,
        "y": 960,
        "wires": [
            [
                "66ee4fadd1c2d786",
                "307fca30ed35c29f"
            ]
        ]
    },
    {
        "id": "040899dbfc2c5940",
        "type": "ui_button",
        "z": "622b7c2ad32f0fe6",
        "name": "Dry nitrogen (Dewar) open",
        "group": "b2d40cfa2a020055",
        "order": 4,
        "width": "3",
        "height": "2",
        "passthru": false,
        "label": "Open Valve",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "DND",
        "topicType": "msg",
        "x": 360,
        "y": 800,
        "wires": [
            [
                "0aa0d20eb277d3db",
                "5cc7428f81ae302b"
            ]
        ]
    },
    {
        "id": "87798ecbf358bc7c",
        "type": "ui_button",
        "z": "622b7c2ad32f0fe6",
        "name": "Dry nitrogen (Dewar) closed",
        "group": "b2d40cfa2a020055",
        "order": 5,
        "width": "3",
        "height": "2",
        "passthru": false,
        "label": "Close Valve",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "DND",
        "topicType": "msg",
        "x": 360,
        "y": 760,
        "wires": [
            [
                "0aa0d20eb277d3db",
                "5cc7428f81ae302b"
            ]
        ]
    },
    {
        "id": "5cc7428f81ae302b",
        "type": "function",
        "z": "622b7c2ad32f0fe6",
        "name": "Read Dry Nitrogen Valve (Dewar)",
        "func": "// Retrieve the variable from the global context\nvar dnv = context.global.dnv;\n\n// Function to handle incoming messages\nfunction processMessage(msg){\n\n    if (typeof msg.payload === 'number' && Number.isInteger(msg.payload)) {\n        // Check if the message payload is a timestamp (assumed to be an integer)\n        // If it is a timestamp, output the current value of x\n        msg.payload = dnv;\n        return msg;\n    }\n\n    // Check if the message payload is a boolean\n    else if (typeof msg.payload === 'boolean') {\n        // Convert boolean to number\n        context.global.dnv = +msg.payload;\n        return null;\n    }\n\n    // If the message is not a boolean message or timestamp, do nothing\n    return null;\n}\n\n// Process incoming messages\nmsg = processMessage(msg);\n\n// Return the modified message or null if no modification is needed\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n// Store the variable in the global context for reuse\ncontext.global.dnv = 0;",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "307fca30ed35c29f",
        "type": "function",
        "z": "622b7c2ad32f0fe6",
        "name": "Read Dry Nitrogen Valve (Bottle)",
        "func": "// Retrieve the variable from the global context\nvar dnvB = context.global.dnvB;\n\n// Function to handle incoming messages\nfunction processMessage(msg){\n\n    if (typeof msg.payload === 'number' && Number.isInteger(msg.payload)) {\n        // Check if the message payload is a timestamp (assumed to be an integer)\n        // If it is a timestamp, output the current value of x\n        msg.payload = dnvB;\n        return msg;\n    }\n\n    // Check if the message payload is a boolean\n    else if (typeof msg.payload === 'boolean') {\n        // Convert boolean to number\n        context.global.dnvB = +msg.payload;\n        return null;\n    }\n\n    // If the message is not a boolean message or timestamp, do nothing\n    return null;\n}\n\n// Process incoming messages\nmsg = processMessage(msg);\n\n// Return the modified message or null if no modification is needed\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n// Store the variable in the global context for reuse\ncontext.global.dnvB = 0;",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "702dff2e8c43a3d0",
        "type": "function",
        "z": "622b7c2ad32f0fe6",
        "name": "Read Liquid Nitrogen Valve",
        "func": "// Retrieve the variable from the global context\nvar lnv = context.global.lnv;\n\n// Function to handle incoming messages\nfunction processMessage(msg){\n\n    if (typeof msg.payload === 'number' && Number.isInteger(msg.payload)) {\n        // Check if the message payload is a timestamp (assumed to be an integer)\n        // If it is a timestamp, output the current value of x\n        msg.payload = lnv;\n        return msg;\n    }\n\n    // Check if the message payload is a boolean\n    else if (typeof msg.payload === 'boolean') {\n        // Convert boolean to number\n        context.global.lnv = +msg.payload;\n        return null;\n    }\n\n    // If the message is not a boolean message or timestamp, do nothing\n    return null;\n}\n\n// Process incoming messages\nmsg = processMessage(msg);\n\n// Return the modified message or null if no modification is needed\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n// Store the variable in the global context for reuse\ncontext.global.lnv = 0;",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "451ba14a39b61ac1",
        "type": "function",
        "z": "622b7c2ad32f0fe6",
        "name": "Read Pressure Gauge Status",
        "func": "// Retrieve the variable from the global context\nvar pgr = context.global.pgr;\n\n// Function to handle incoming messages\nfunction processMessage(msg){\n\n    if (typeof msg.payload === 'number' && Number.isInteger(msg.payload)) {\n        // Check if the message payload is a timestamp (assumed to be an integer)\n        // If it is a timestamp, output the current value of x\n        msg.payload = pgr;\n        return msg;\n    }\n\n    // Check if the message payload is a boolean\n    else if (typeof msg.payload === 'boolean') {\n        // Convert boolean to number\n        context.global.pgr = +msg.payload;\n        return null;\n    }\n\n    // If the message is not a boolean message or timestamp, do nothing\n    return null;\n}\n\n// Process incoming messages\nmsg = processMessage(msg);\n\n// Return the modified message or null if no modification is needed\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n// Store the variable in the global context for reuse\ncontext.global.pgr = 0;",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "30059a2215439a52",
        "type": "comment",
        "z": "622b7c2ad32f0fe6",
        "name": "Pressure Gauge Power Relay",
        "info": "",
        "x": 360,
        "y": 540,
        "wires": []
    },
    {
        "id": "76f7479c89e6a20a",
        "type": "comment",
        "z": "622b7c2ad32f0fe6",
        "name": "Liquid Nitrogen Solenoid Valve",
        "info": "",
        "x": 360,
        "y": 260,
        "wires": []
    },
    {
        "id": "29892b9eb242b422",
        "type": "comment",
        "z": "622b7c2ad32f0fe6",
        "name": "Dry Nitrogen Solenoid Valve (Bottle)",
        "info": "",
        "x": 380,
        "y": 920,
        "wires": []
    },
    {
        "id": "a20d08208df7c8c7",
        "type": "comment",
        "z": "622b7c2ad32f0fe6",
        "name": "Dry Nitrogen Solenoid Valve (Dewar)",
        "info": "",
        "x": 380,
        "y": 720,
        "wires": []
    },
    {
        "id": "15f1b082197001dc",
        "type": "function",
        "z": "622b7c2ad32f0fe6",
        "name": "Send Relay State",
        "func": "var pgr = context.global.pgr;\nvar lnv = context.global.lnv;\nvar dnvB = context.global.dnvB;\nvar dnv = context.global.dnv;\nvar time = msg.payload;\nmsg.payload= {\n    \"timestamp\": time,\n    \"pressure_gauge\": pgr,\n    \"LN2_valve\": lnv,\n    \"dry_nitrogen_bottle\":dnvB,\n    \"dry_nitrogen\":dnv\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 120,
        "wires": [
            [
                "de1fb10928b52cfb"
            ]
        ]
    },
    {
        "id": "f9f49a9064f18a4a",
        "type": "comment",
        "z": "622b7c2ad32f0fe6",
        "name": "Write to DB",
        "info": "",
        "x": 310,
        "y": 80,
        "wires": []
    },
    {
        "id": "de1fb10928b52cfb",
        "type": "link out",
        "z": "622b7c2ad32f0fe6",
        "name": "Relay State (Out)",
        "mode": "link",
        "links": [
            "752a4f2935891d48"
        ],
        "x": 535,
        "y": 120,
        "wires": []
    },
    {
        "id": "02e5cf0e5d504f88",
        "type": "link out",
        "z": "622b7c2ad32f0fe6",
        "name": "Autoclose (Out)",
        "mode": "link",
        "links": [
            "58d869ed67de6b51",
            "4fa52675725d76d1",
            "cad76add85498c58",
            "48cfceccd5981fb0",
            "8fe8412c76e72896",
            "aaed0ce160d25dbd"
        ],
        "x": 895,
        "y": 300,
        "wires": []
    },
    {
        "id": "55b1f5bb292419e1",
        "type": "status",
        "z": "622b7c2ad32f0fe6",
        "name": "Valve status",
        "scope": [
            "8c09e51e91d32426"
        ],
        "x": 310,
        "y": 300,
        "wires": [
            [
                "0fb17c895329b3dc"
            ]
        ]
    },
    {
        "id": "de8c04b98c244b79",
        "type": "tobool",
        "z": "622b7c2ad32f0fe6",
        "name": "",
        "property": "payload",
        "showState": true,
        "filter": false,
        "x": 630,
        "y": 300,
        "wires": [
            [
                "cca3e9738ba4cde2"
            ]
        ]
    },
    {
        "id": "0fb17c895329b3dc",
        "type": "function",
        "z": "622b7c2ad32f0fe6",
        "name": "Read state",
        "func": "// Read the status of the GPIO state\nmsg.payload = msg.status.text || '';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 300,
        "wires": [
            [
                "de8c04b98c244b79"
            ]
        ]
    },
    {
        "id": "cca3e9738ba4cde2",
        "type": "change",
        "z": "622b7c2ad32f0fe6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "LIN",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 300,
        "wires": [
            [
                "02e5cf0e5d504f88"
            ]
        ]
    },
    {
        "id": "2660387908d5c503",
        "type": "inject",
        "z": "622b7c2ad32f0fe6",
        "name": "Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "init",
        "payloadType": "str",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "5aa547436835f96c"
            ]
        ]
    },
    {
        "id": "8dba6138e0405847",
        "type": "delay",
        "z": "622b7c2ad32f0fe6",
        "name": "Autoclose",
        "pauseType": "delay",
        "timeout": "8",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 140,
        "y": 380,
        "wires": [
            [
                "5aa547436835f96c"
            ]
        ]
    },
    {
        "id": "4bc85591cac5b42d",
        "type": "link in",
        "z": "622b7c2ad32f0fe6",
        "name": "link in 4",
        "links": [
            "3aa41ea9d9aea29c",
            "884221549b46e093"
        ],
        "x": 215,
        "y": 120,
        "wires": [
            [
                "15f1b082197001dc"
            ]
        ]
    }
]